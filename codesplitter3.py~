import re

class CodeSplit:
    'CodeSplit class for chunked program.'

    
    def __init__():

    def parseDataChunk(thisChunk):
        outset = re.search(r'(?<=set )\s*(?P<ds>(\w|\.)+)',thisChunk,flags=re.MULTILINE)
        if outset:
            outds=outset.group('ds')
        else:
            outds="(FAIL)"
        inset = re.search(r'\s*(?P<ds>(\w|\.)+)',thisChunk,flags=re.MULTILINE)
        if inset:
            inds=inset.group('ds')
        else:
            inds="(NONE)"
        return [inds,outds]

    def chunkProgram(self,program):
        self.name = program
        self.chunks = re.split(r'(data |proc )',program)

        prev = ""
        for idx,chunk in enumerate(chunks):
            if prev == "DATA":
                dataflow = parseDataChunk(chunk)
                print "%s --DATA(SET)--> %s" % (dataflow[0],dataflow[1])
            elif prev == "PROC":
                proctype = re.match(r'^(\w|\.)+',chunk)
                print "PROC Block: Type = %s" % proctype.group(0)
            # Prep for next chunk.
            if chunk == "data ":
                prev="DATA"
            elif chunk == "proc ":
                prev="PROC"
            else:
                prev=""


        
def parseDataChunk(thisChunk):
    outset = re.search(r'(?<=set )\s*(?P<ds>(\w|\.)+)',thisChunk,flags=re.MULTILINE)
    if outset:
        outds=outset.group('ds')
    else:
        outds="(FAIL)"
    inset = re.search(r'\s*(?P<ds>(\w|\.)+)',thisChunk,flags=re.MULTILINE)
    if inset:
        inds=inset.group('ds')
    else:
        inds="(NONE)"
    return [inds,outds]

mixed = re.split(r'(data |proc )',prog)
prev = ""
for idx,chunk in enumerate(mixed):
    print chunk
    if prev == "DATA":
        dataflow = parseDataChunk(chunk)
        print "%s --DATA(SET)--> %s" % (dataflow[0],dataflow[1])
    elif prev == "PROC":
        proctype = re.match(r'^(\w|\.)+',chunk)
        print "PROC Block: Type = %s" % proctype.group(0)
    # Prep for next chunk.
    if chunk == "data ":
        prev="DATA"
    elif chunk == "proc ":
        prev="PROC"
    else:
        prev=""
        
